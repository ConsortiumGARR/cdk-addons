#!/usr/bin/python3

import os
import shutil
import subprocess
from jinja2 import Template

template_dir = os.path.join(os.environ["SNAP"], "templates")
addon_dir = os.path.join(os.environ["SNAP_USER_DATA"], "addons")

def main():
    render_templates()
    apply_addons()

def render_templates():
    shutil.rmtree(addon_dir, ignore_errors=True)
    os.mkdir(addon_dir)
    context = {
        "arch": get_snap_config("arch"),
        "pillar": {
            "dns_server": get_snap_config("dns-ip"),
            "dns_domain": get_snap_config("dns-domain"),
            "num_nodes": get_node_count()
        }
    }
    render_template("kubedns-sa.yaml", context, required=False)
    render_template("kubedns-cm.yaml", context, required=False)
    render_template("kubedns-controller.yaml", context)
    render_template("kubedns-svc.yaml", context)
    if get_snap_config("enable-dashboard") == "true":
        render_template("dashboard-controller.yaml", context)
        render_template("dashboard-service.yaml", context)
        render_template("influxdb-grafana-controller.yaml", context)
        render_template("influxdb-service.yaml", context)
        render_template("grafana-service.yaml", context)
        render_template("heapster-controller.yaml", context)
        render_template("heapster-service.yaml", context)

def render_template(file, context, required=True):
    source = os.path.join(template_dir, file)
    dest = os.path.join(addon_dir, file)
    if not os.path.exists(source) and not required:
        return
    with open(source) as f:
        template = Template(f.read())
    with open(dest, "w") as f:
        f.write(template.render(context))

def apply_addons():
    kubectl("apply",
        "-f", addon_dir,
        "--recursive",
        "--namespace=kube-system",
        "-l", "kubernetes.io/cluster-service=true",
        "--prune=true",
        "--force"
    )

def kubectl(*args):
    cmd = [os.path.join(os.environ["SNAP"], "kubectl")]
    kubeconfig = get_snap_config("kubeconfig", required=False)
    if kubeconfig:
        cmd += ["--kubeconfig", kubeconfig]
    cmd += list(args)
    return subprocess.check_output(cmd)

def get_node_count():
    '''Return the number of Kubernetes nodes in the cluster'''
    output = kubectl("get", "nodes", "-o", "name")
    node_count = len(output.splitlines())
    return node_count

def get_snap_config(name, required=True):
    path = os.path.join(os.environ["SNAP_DATA"], "config", name)
    with open(path) as f:
        value = f.read().rstrip()
    if not value and required:
        raise MissingSnapConfig("%s is required" % name)
    return value

class MissingSnapConfig(Exception):
    pass

if __name__ == "__main__":
    main()
