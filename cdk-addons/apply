#!/usr/bin/python3

import os
import sys
import shutil
import subprocess
from jinja2 import Template

template_dir = os.path.join(os.environ["SNAP"], "templates")
addon_dir = os.path.join(os.environ["SNAP_USER_DATA"], "addons")

def main(skip_dns=False):
    render_templates()
    apply_addons(skip_dns)

def render_templates():
    shutil.rmtree(addon_dir, ignore_errors=True)
    os.mkdir(addon_dir)
    external_dns = ""
    federation = ""
    try:
        external_dns = "- --server={}".format(get_snap_config("external-dns-server"))
        federation = "data:\n  federations: {}".format(get_snap_config("federation"))
    except MissingSnapConfig:
        pass

    context = {
        "arch": get_snap_config("arch"),
        "pillar": {
            "dns_server": get_snap_config("dns-ip"),
            "dns_domain": get_snap_config("dns-domain"),
            "num_nodes": get_node_count(),
            "external_dns_server": external_dns,
            "federation": federation
        },
        "coredns": {
            "cluster_domain": get_snap_config("dns-domain"),
            "service_cidr":  get_snap_config("service-cidr"),
            "cluster_dns_ip": get_snap_config("dns-ip"),
            "port": get_snap_config("coredns-port"),
        },
    }
    render_template("kubedns-sa.yaml", context, required=False)
    render_template("kubedns-cm.yaml", context, required=False)
    render_template("kubedns-controller.yaml", context)
    render_template("kubedns-svc.yaml", context)
    render_template("coredns-rbac-cm.yaml", context)
    render_template("coredns-rbac.yaml", context)
    if get_snap_config("enable-dashboard") == "true":
        render_template("dashboard-controller.yaml", context)
        render_template("dashboard-service.yaml", context)
        render_template("influxdb-grafana-controller.yaml", context)
        render_template("influxdb-service.yaml", context)
        render_template("grafana-service.yaml", context)
        render_template("heapster-controller.yaml", context)
        render_template("heapster-service.yaml", context)

def render_template(file, context, required=True):
    source = os.path.join(template_dir, file)
    dest = os.path.join(addon_dir, file)
    if not os.path.exists(source) and not required:
        return
    with open(source) as f:
        template = Template(f.read())
    with open(dest, "w") as f:
        f.write(template.render(context))

def apply_addons(skip_dns):
    if skip_dns:
        [os.remove(os.path.join(addon_dir, f)) for f in os.listdir(addon_dir) if f.startswith("kubedns")]
        dns_cm = os.path.join(addon_dir, "coredns-rbac-cm.yaml")
        args = ["apply",
                "-f", dns_cm,
                "--namespace=kube-system",
                "--force"]
        kubectl(*args)
        dns_svc = os.path.join(addon_dir, "coredns-rbac.yaml")
    else:
        [os.remove(os.path.join(addon_dir, f)) for f in os.listdir(addon_dir) if f.startswith("coredns")]
        dns_svc = os.path.join(addon_dir, "kubedns-svc.yaml")

    # Apply dns service first and then recursively the rest.
    args = ["apply",
            "-f", dns_svc,
            "--namespace=kube-system",
            "-l", "kubernetes.io/cluster-service=true",
            "--force"]
    kubectl(*args)

    # Apply the rest of the services
    args = ["apply",
            "-f", addon_dir,
            "--recursive",
            "--namespace=kube-system",
            "-l", "kubernetes.io/cluster-service=true",
            "--prune=true",
            "--force"]
    kubectl(*args)

def kubectl(*args):
    cmd = [os.path.join(os.environ["SNAP"], "kubectl")]
    kubeconfig = get_snap_config("kubeconfig", required=False)
    if kubeconfig:
        cmd += ["--kubeconfig", kubeconfig]
    cmd += list(args)
    return subprocess.check_output(cmd)

def get_node_count():
    '''Return the number of Kubernetes nodes in the cluster'''
    output = kubectl("get", "nodes", "-o", "name")
    node_count = len(output.splitlines())
    return node_count

def get_snap_config(name, required=True):
    path = os.path.join(os.environ["SNAP_DATA"], "config", name)
    with open(path) as f:
        value = f.read().rstrip()
    if not value and required:
        raise MissingSnapConfig("%s is required" % name)
    return value

class MissingSnapConfig(Exception):
    pass

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "coredns":
        main(skip_dns=True)
    else:
        main(skip_dns=False)
