#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys
import tempfile
import logging
from contextlib import contextmanager


description = """
Update addon manifests for the charm.

This will clone the kubernetes repo and place the addons in
<charm>/templates/addons.

Can be run with no arguments and from any folder.
"""

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
log = logging.getLogger(__name__)


def clean_addon_dir(addon_dir):
    """ Remove and recreate the addons folder """
    log.debug("Cleaning " + addon_dir)
    shutil.rmtree(addon_dir, ignore_errors=True)
    os.makedirs(addon_dir)


def run_with_logging(command):
    """ Run a command with controlled logging """
    log.debug("Running: %s" % command)
    process = subprocess.Popen(command, stderr=subprocess.PIPE)
    stderr = process.communicate()[1].rstrip()
    process.wait()
    if process.returncode != 0:
        log.error(stderr)
        raise Exception("%s: exit code %d" % (command, process.returncode))
    log.debug(stderr)


@contextmanager
def kubernetes_repo():
    """ Yield a kubernetes repo to copy addons from. """
    repo = "https://github.com/kubernetes/kubernetes.git"
    branch = "v%s" % os.environ["KUBE_VERSION"]
    log.info("Cloning %s with branch %s" % (repo, branch))
    path = tempfile.mkdtemp(prefix="kubernetes")
    try:
        cmd = ["git", "clone", repo, path, "-b", branch, "--depth", "1"]
        run_with_logging(cmd)
        yield path
    finally:
        shutil.rmtree(path)


def add_addon(repo, source, dest):
    """ Add an addon manifest from the given repo and source.

    Any occurrences of 'amd64' are replaced with '{{ arch }}' so the charm can
    fill it in during deployment. """
    source = os.path.join(repo, "cluster/addons", source)
    if os.path.isdir(dest):
        dest = os.path.join(dest, os.path.basename(source))
    log.debug("Copying: %s -> %s" % (source, dest))
    with open(source, "r") as f:
        content = f.read()
    content = content.replace("amd64", "{{ arch }}")
    with open(dest, "w") as f:
        f.write(content)


def update_addons(dest):
    """ Update addons. This will clean the addons folder and add new manifests
    from upstream. """
    with kubernetes_repo() as repo:
        log.info("Copying addons to charm")
        clean_addon_dir(dest)
        add_addon(repo, "dashboard/dashboard-controller.yaml", dest)
        add_addon(repo, "dashboard/dashboard-service.yaml", dest)
        try:
            add_addon(repo, "dns/kubedns-controller.yaml.in",
                      dest + "/kubedns-controller.yaml")
            add_addon(repo, "dns/kubedns-svc.yaml.in",
                      dest + "/kubedns-svc.yaml")
        except IOError as e:
            # fall back to the older filenames
            log.debug(e)
            add_addon(repo, "dns/skydns-rc.yaml.in",
                      dest + "/kubedns-controller.yaml")
            add_addon(repo, "dns/skydns-svc.yaml.in",
                      dest + "/kubedns-svc.yaml")
        influxdb = "cluster-monitoring/influxdb"
        add_addon(repo, influxdb + "/grafana-service.yaml", dest)
        add_addon(repo, influxdb + "/heapster-controller.yaml", dest)
        add_addon(repo, influxdb + "/heapster-service.yaml", dest)
        add_addon(repo, influxdb + "/influxdb-grafana-controller.yaml", dest)
        add_addon(repo, influxdb + "/influxdb-service.yaml", dest)


def parse_args():
    """ Parse args. This is solely done for the usage output with -h """
    parser = argparse.ArgumentParser(description=description)
    parser.parse_args()


def main():
    """ Update addons into the layer's templates/addons folder """
    parse_args()
    update_addons("templates")


if __name__ == "__main__":
    main()
